{"version":3,"file":"7047.index.js","mappings":"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","sources":["webpack://thebe/../../node_modules/@lezer/markdown/dist/index.js","webpack://thebe/../../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"URL\"] = 33] = \"URL\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// For reused nodes on gaps, we can't directly put the original\n        /// node into the tree, since that may be bitter than its parent.\n        /// When this happens, we create a dummy tree that is replaced by\n        /// the proper node in `injectGaps` @internal\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            while (line.depth < this.stack.length)\n                this.finishContext();\n            for (let mark of line.markers)\n                this.addNode(mark.type, mark.from, mark.to);\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url)\n            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0) | (canClose ? 2 /* Mark.Close */ : 0)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n            if (title)\n                pos = cx.skipSpace(title.to);\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0) | (close ? 2 /* Mark.Close */ : 0)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    URL: tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]+@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.\\w+(\\.\\w+)?)(\\/[^\\s<]*)?/gy;\nconst emailRE = /[\\w.+-]+@[\\w-]+\\.[\\w.-]+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n    let result = 0;\n    for (let i = from; i < to; i++)\n        if (str[i] == ch)\n            result++;\n    return result;\n}\nfunction autolinkURLEnd(text, from) {\n    urlRE.lastIndex = from;\n    let m = urlRE.exec(text);\n    if (!m)\n        return -1;\n    let end = from + m[0].length;\n    for (;;) {\n        let last = text[end - 1], m;\n        if (/[?!.,:*_~]/.test(last) ||\n            last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\"))\n            end--;\n        else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end))))\n            end = from + m.index;\n        else\n            break;\n    }\n    return end;\n}\nfunction autolinkEmailEnd(text, from) {\n    emailRE.lastIndex = from;\n    let m = emailRE.exec(text);\n    if (!m)\n        return -1;\n    let last = m[0][m[0].length - 1];\n    return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/// Extension that implements autolinking for\n/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\n/// addresses.\nconst Autolink = {\n    parseInline: [{\n            name: \"Autolink\",\n            parse(cx, next, absPos) {\n                let pos = absPos - cx.offset;\n                autolinkRE.lastIndex = pos;\n                let m = autolinkRE.exec(cx.text), end = -1;\n                if (!m)\n                    return -1;\n                if (m[1] || m[2]) { // www., http://\n                    end = autolinkURLEnd(cx.text, pos + m[0].length);\n                }\n                else if (m[3]) { // email address\n                    end = autolinkEmailEnd(cx.text, pos);\n                }\n                else { // mailto:/xmpp:\n                    end = autolinkEmailEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && m[0] == \"xmpp:\") {\n                        xmppResourceRE.lastIndex = end;\n                        m = xmppResourceRE.exec(cx.text);\n                        if (m)\n                            end = m.index + m[0].length;\n                    }\n                }\n                if (end < 0)\n                    return -1;\n                cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n                return end + cx.offset;\n            }\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n/// [`Autolink`](#Autolink).\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, countColumn, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, indentUnit, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^( *)\\d+([.)])( *)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^( *)([-+*])( {1,4}\\[[ xX]\\])?( +)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\nfunction normalizeIndent(content, state) {\n    let blank = /^[ \\t]*/.exec(content)[0].length;\n    if (!blank || state.facet(indentUnit) != \"\\t\")\n        return content;\n    let col = countColumn(content, 4, blank);\n    let space = \"\";\n    for (let i = col; i > 0;) {\n        if (i >= 4) {\n            space += \"\\t\";\n            i -= 4;\n        }\n        else {\n            space += \" \";\n            i--;\n        }\n    }\n    return space + content.slice(blank);\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            // First list item or blank line before: delete a level of markup\n            if (inner.node.firstChild.to >= pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move this line down\n                let insert = \"\";\n                for (let i = 0, e = context.length - 2; i <= e; i++) {\n                    insert += context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null, i < e);\n                }\n                insert = normalizeIndent(insert, state);\n                return { range: EditorSelection.cursor(pos + insert.length + 1),\n                    changes: { from: line.from, insert: insert + state.lineBreak } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = normalizeIndent(insert, state);\n        changes.push({ from, to: pos, insert: state.lineBreak + insert });\n        return { range: EditorSelection.cursor(from + insert.length + 1), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to))) {\n                        let insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));\n                        if (start == line.from)\n                            insert = normalizeIndent(insert, state);\n                        return { range: EditorSelection.cursor(start + insert.length),\n                            changes: { from: start, to: line.from + inner.to, insert } };\n                    }\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["Type","CompositeBlock","static","type","value","from","parentHash","end","constructor","hash","children","positions","this","hashProp","addChild","child","pos","prop","length","push","toTree","nodeSet","last","Math","max","types","balance","makeTree","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","reusePlaceholders","Map","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","create","FragmentCursor","readLine","parsedPos","finishContext","mark","reuseFragment","blockParsers","parse","leafBlockParsers","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","toRelative","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","startComposite","getNodeType","none","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dummies","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","reuse","get","propValues","MarkdownParser","blockNames","inlineParsers","inlineNames","wrappers","super","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","props","Array","isArray","extend","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Escapable","Punctuation","RegExp","DefaultInline","escaped","append","Entity","exec","InlineCode","curSize","HTMLTag","url","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","emp","closeSize","k","element","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","dummy","set","is","abs","gapFrom","gapTo","markdownHighlighting","keys","map","n","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","TaskParser","TaskList","autolinkRE","urlRE","emailRE","xmppResourceRE","autolinkEmailEnd","lastIndex","GFM","absPos","index","autolinkURLEnd","parseSubSuper","Superscript","Subscript","Emoji","match","data","commentTokens","headingProp","commonmark","isHeading","state","doc","lineAt","add","findSectionEnd","headerNode","level","heading","headerIndent","resolveInner","mkLang","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","blank","maxWidth","marker","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","normalizeIndent","facet","insertNewlineContinueMarkup","dispatch","dont","changeByRange","range","empty","isActiveAt","emptyLine","delTo","lineBreak","prevLine","quoted","continued","charAt","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","completeHTMLTags","defaultCode","extensions","support","language","codeParser","languages","defaultLanguage","info","load","htmlParser","overlay","infoNode","getChild","parseCode","lang","of","autocomplete","htmlTagCompletion","sliceDoc","isTop","options","htmlTagCompletions","validFor","_tagCompletions","htmlCompletionSource"],"sourceRoot":""}
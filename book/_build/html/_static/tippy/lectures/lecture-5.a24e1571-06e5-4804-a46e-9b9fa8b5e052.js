selector_to_html = {"a[href=\"#fourier-transform-of-images\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Fourier Transform of Images<a class=\"headerlink\" href=\"#fourier-transform-of-images\" title=\"Link to this heading\">#</a></h2><p><strong>Features extracted:</strong></p>", "a[href=\"#what-is-a-function-in-the-time-domain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What is a Function in the Time Domain?<a class=\"headerlink\" href=\"#what-is-a-function-in-the-time-domain\" title=\"Link to this heading\">#</a></h2><p><strong>Mathematically:</strong><br/>\n<span class=\"math notranslate nohighlight\">\\( f(t): \\mathbb{R} \\to \\mathbb{R} \\)</span> \u2014 maps time to amplitude.</p>", "a[href=\"#frequency-domain-convolution-fft\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Frequency-Domain Convolution (FFT)<a class=\"headerlink\" href=\"#frequency-domain-convolution-fft\" title=\"Link to this heading\">#</a></h4><p>Using the <strong>Fast Fourier Transform (FFT)</strong>, we convert both the image and kernel to the frequency domain, multiply them point-wise, and then apply the inverse FFT. The steps are:</p>", "a[href=\"#image-processing-part-2-fourier-domain\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Image Processing (Part 2) Fourier Domain<a class=\"headerlink\" href=\"#image-processing-part-2-fourier-domain\" title=\"Link to this heading\">#</a></h1><h2>What is a Function in the Time Domain?<a class=\"headerlink\" href=\"#what-is-a-function-in-the-time-domain\" title=\"Link to this heading\">#</a></h2><p><strong>Mathematically:</strong><br/>\n<span class=\"math notranslate nohighlight\">\\( f(t): \\mathbb{R} \\to \\mathbb{R} \\)</span> \u2014 maps time to amplitude.</p>", "a[href=\"#time-complexity-matrix-multiplication-vs-fft\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Time Complexity: Matrix Multiplication vs FFT<a class=\"headerlink\" href=\"#time-complexity-matrix-multiplication-vs-fft\" title=\"Link to this heading\">#</a></h3><p>In image processing, when we apply a filter (or kernel) of size <span class=\"math notranslate nohighlight\">\\( m \\times m \\)</span> to an image of size <span class=\"math notranslate nohighlight\">\\( n \\times n \\)</span>, we are essentially performing a 2D convolution. This can be implemented directly in the spatial (time) domain or efficiently in the frequency (Fourier) domain.</p>", "a[href=\"#interpreting-images-as-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interpreting Images as Functions<a class=\"headerlink\" href=\"#interpreting-images-as-functions\" title=\"Link to this heading\">#</a></h2><p><strong>Examples:</strong></p>", "a[href=\"#time-domain-convolution-matrix-multiply\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Time-Domain Convolution (Matrix Multiply)<a class=\"headerlink\" href=\"#time-domain-convolution-matrix-multiply\" title=\"Link to this heading\">#</a></h4><p>In the time domain, for each of the <span class=\"math notranslate nohighlight\">\\( n^2 \\)</span> pixels in the image, the filter slides over and computes a weighted sum using all <span class=\"math notranslate nohighlight\">\\( m^2 \\)</span> filter elements.</p><p>Thus, the total number of operations is:</p>", "a[href=\"#comparison-summary\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Comparison Summary<a class=\"headerlink\" href=\"#comparison-summary\" title=\"Link to this heading\">#</a></h4><p>Thus, <strong>FFT-based convolution is asymptotically faster</strong> for large images and kernels. In practice, libraries like NumPy and SciPy switch to FFT automatically when the kernel is large.</p>", "a[href=\"#moving-between-domains\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Moving Between Domains<a class=\"headerlink\" href=\"#moving-between-domains\" title=\"Link to this heading\">#</a></h2><p><strong>Why do this?</strong><br/>\nSome operations (like filtering, compression, pattern detection) are <strong>easier in the frequency domain</strong> because they become algebraic (e.g., multiplication instead of convolution), enabling more efficient computation and intuitive manipulation of signal characteristics.</p>", "a[href=\"#what-is-the-frequency-fourier-domain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What is the Frequency (Fourier) Domain?<a class=\"headerlink\" href=\"#what-is-the-frequency-fourier-domain\" title=\"Link to this heading\">#</a></h2><p><strong>Example:</strong><br/>\n<span class=\"math notranslate nohighlight\">\\( f(t) = \\sin(2\\pi \\cdot 5t) \\)</span><br/>\n\u2192 A 5 Hz sine wave has <strong>one spike at 5 Hz</strong> in frequency domain.</p>", "a[href=\"#how-good-is-the-reconstruction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How good is the reconstruction?<a class=\"headerlink\" href=\"#how-good-is-the-reconstruction\" title=\"Link to this heading\">#</a></h2><p>When shifting from time domain to frequency domain and shifting back to time domain from freq domain, do we loose any information?</p><p>No, <strong>if the Fourier Transform and its inverse are applied correctly</strong>, we do <strong>not lose any information</strong> during the shift between time and frequency domains.</p>", "a[href=\"#what-are-the-performance-improvements\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are the performance improvements?<a class=\"headerlink\" href=\"#what-are-the-performance-improvements\" title=\"Link to this heading\">#</a></h2><h3>Time Complexity: Matrix Multiplication vs FFT<a class=\"headerlink\" href=\"#time-complexity-matrix-multiplication-vs-fft\" title=\"Link to this heading\">#</a></h3><p>In image processing, when we apply a filter (or kernel) of size <span class=\"math notranslate nohighlight\">\\( m \\times m \\)</span> to an image of size <span class=\"math notranslate nohighlight\">\\( n \\times n \\)</span>, we are essentially performing a 2D convolution. This can be implemented directly in the spatial (time) domain or efficiently in the frequency (Fourier) domain.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`main ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {});},
            });
        };
    };
    console.log("tippy tips loaded!");
};

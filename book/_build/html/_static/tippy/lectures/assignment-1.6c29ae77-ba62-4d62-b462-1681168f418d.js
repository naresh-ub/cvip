selector_to_html = {"a[href=\"#part-1-rotation-matrix\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Part 1: Rotation Matrix<a class=\"headerlink\" href=\"#part-1-rotation-matrix\" title=\"Link to this heading\">#</a></h1><p>To transform coordinates from the <strong>original frame <code class=\"docutils literal notranslate\"><span class=\"pre\">xyz</span></code></strong> to the <strong>rotated frame <code class=\"docutils literal notranslate\"><span class=\"pre\">XYZ</span></code></strong>, we follow a <strong>specific sequence of rotations</strong>, exactly as shown in Figure\u202f1:</p><p>1\ufe0f\u20e3 <strong>Rotate around the initial <code class=\"docutils literal notranslate\"><span class=\"pre\">z</span></code> axis by angle \u03b1</strong></p>", "a[href=\"#visualization-to-see-all-transformations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Visualization to see all transformations<a class=\"headerlink\" href=\"#visualization-to-see-all-transformations\" title=\"Link to this heading\">#</a></h2>", "a[href=\"#validate-projection\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">validate_projection</span></code><a class=\"headerlink\" href=\"#validate-projection\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#chessboard-corner-detection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Chessboard Corner Detection<a class=\"headerlink\" href=\"#chessboard-corner-detection\" title=\"Link to this heading\">#</a></h2><p>Before calibrating the camera, we need to detect reliable 2D points in the image.<br/>\nThis function detects the <strong>inner corners</strong> of a chessboard pattern:</p>", "a[href=\"#id1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">What It Does<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#finding-camera-extrinsic-parameters\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Finding Camera Extrinsic Parameters<a class=\"headerlink\" href=\"#finding-camera-extrinsic-parameters\" title=\"Link to this heading\">#</a></h2><p>This function computes the <strong>extrinsic parameters</strong> \u2014 the <strong>rotation matrix</strong> <span class=\"math notranslate nohighlight\">\\(\\mathbf{R}\\)</span> and the <strong>translation vector</strong> <span class=\"math notranslate nohighlight\">\\(\\mathbf{T}\\)</span> \u2014 that describe the camera\u2019s pose in the world coordinate system.</p>", "a[href=\"#output\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Output<a class=\"headerlink\" href=\"#output\" title=\"Link to this heading\">#</a></h3><p>Returns <span class=\"math notranslate nohighlight\">\\(f_x\\)</span>, <span class=\"math notranslate nohighlight\">\\(f_y\\)</span>, <span class=\"math notranslate nohighlight\">\\(c_x\\)</span>, and <span class=\"math notranslate nohighlight\">\\(c_y\\)</span> which form the intrinsic camera matrix:</p>", "a[href=\"#how-it-works\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">How It Works<a class=\"headerlink\" href=\"#how-it-works\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#assignment-1-solution\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">\ud83d\udccc Assignment 1 Solution<a class=\"headerlink\" href=\"#assignment-1-solution\" title=\"Link to this heading\">#</a></h1><p><code class=\"docutils literal notranslate\"><span class=\"pre\">Live</span> <span class=\"pre\">code</span> <span class=\"pre\">works</span> <span class=\"pre\">with</span> <span class=\"pre\">this</span> <span class=\"pre\">webpage,</span> <span class=\"pre\">play</span> <span class=\"pre\">around</span> <span class=\"pre\">with</span> <span class=\"pre\">the</span> <span class=\"pre\">code.</span></code></p>", "a[href=\"#validating-camera-calibration-by-reprojection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Validating Camera Calibration by Reprojection<a class=\"headerlink\" href=\"#validating-camera-calibration-by-reprojection\" title=\"Link to this heading\">#</a></h2><p>Once we have both the <strong>intrinsic</strong> and <strong>extrinsic</strong> parameters, we can verify the calibration quality by projecting known 3D world points back onto the image plane and comparing them with the actual detected image points.</p>", "a[href=\"#show-projection\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">show_projection</span></code><a class=\"headerlink\" href=\"#show-projection\" title=\"Link to this heading\">#</a></h3><p>Together, these steps are the final sanity check to ensure that your <strong>camera calibration</strong> is geometrically correct.</p>", "a[href=\"#id2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">How It Works<a class=\"headerlink\" href=\"#id2\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#finding-camera-intrinsic-parameters\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Finding Camera Intrinsic Parameters<a class=\"headerlink\" href=\"#finding-camera-intrinsic-parameters\" title=\"Link to this heading\">#</a></h2><p>This function estimates the camera\u2019s intrinsic parameters <span class=\"math notranslate nohighlight\">\\((f_x, f_y, c_x, c_y)\\)</span> using known correspondences between image coordinates and world coordinates of the checkerboard corners.</p>", "a[href=\"#id3\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Output<a class=\"headerlink\" href=\"#id3\" title=\"Link to this heading\">#</a></h3><p>Combined, they define the <strong>pose</strong> of the camera in the world.</p>", "a[href=\"#what-it-does\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">What It Does<a class=\"headerlink\" href=\"#what-it-does\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#part-2-camera-calibration\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Part 2: Camera Calibration<a class=\"headerlink\" href=\"#part-2-camera-calibration\" title=\"Link to this heading\">#</a></h1><p>(There are multiple ways to read an image. Code for reading the image, is not a part of grading.)</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`main ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {});},
            });
        };
    };
    console.log("tippy tips loaded!");
};
